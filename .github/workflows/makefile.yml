name: binutils-gdb CI

on:
  push:
    branches: [ "aarch64-pe-dev", "master" ]
  pull_request:
    branches: [ "aarch64-pe-dev" ]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch name'
        required: false
        type: string
  workflow_call:
    inputs:
      branch:
        description: 'Branch name'
        required: false
        type: string
      merge-with-branch: 
        description: 'Apply merge with this branch'
        required: false
        type: string

jobs:

  build-all-targets:

    runs-on: ubuntu-latest

    steps:
    - name: Install dependencies
      run: | 
        sudo apt-get update
        sudo apt-get -y install libmpfr-dev
        
    - uses: actions/checkout@v3
      with:
        fetch-depth: ${{ inputs.merge-with-branch == null && 1 || 0 }}
        ref: ${{ inputs.branch }}
    
    - name: Merge if required
      if: ${{ inputs.merge-with-branch != null && inputs.merge-with-branch != '' }}
      run: |
        echo "Merging ${{ inputs.merge-with-branch }} into ${{ github.ref }}"
        git fetch origin ${{ inputs.merge-with-branch }}:${{ inputs.merge-with-branch }}
        git config user.name github-actions
        git config user.email github-actions@github.com
        git merge ${{ inputs.merge-with-branch }} --no-commit

    - name: configure
      run: ./configure --enable-targets=all
      
    - name: build
      run: make -j$(nproc)

  test-binutils:
    env:
      ci_merge_with_branch: ${{ inputs.merge-with-branch }}
      ci_test_variable: HelloWorld
    runs-on: [self-hosted, Windows, ARM64, GCC]

    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ inputs.branch }}

    - name: Get scripts if master
      if: ${{ inputs.branch == 'master'}}
      run: git checkout aarch64-pe-dev -- .github\workflows\ 

    - name: Build binutils
      run: |
        C:\Program` Files\Git\bin\bash.exe .github\workflows\scripts\build-binutils.sh

    - name: Minimal console app testing
      run: |
        C:\Program` Files\Git\bin\bash.exe .github\workflows\scripts\min-con-app-test.sh 

    - name: Configure OpenBLAS
      shell: cmd
      run: |
        git clone --depth 1 https://github.com/xianyi/OpenBLAS.git openblas
        mkdir openblas\build
        "C:\Program Files\Git\bin\bash.exe" -c "sed -i '143,145d' ./openblas/common_arm64.h"
        cd openblas/build
        set PATH=%PATH%;C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\Llvm\ARM64\bin
        cmake ..  -G Ninja -DCMAKE_C_COMPILER=clang -DBUILD_WITHOUT_LAPACK=1 -DNOFORTRAN=1 -DDYNAMIC_ARCH=0 -DTARGET=ARMV8 -DARCH=arm64 -DBINARY=64 -DUSE_OPENMP=0 -DCMAKE_SYSTEM_PROCESSOR=ARM64 -DCMAKE_CROSSCOMPILING=0 -DCMAKE_SYSTEM_NAME=Windows

    - name: Build and test OpenBLAS
      run: |
        C:\Program` Files\Git\bin\bash.exe .github\workflows\scripts\openblas-test.sh

    - name: Testing GMP(GCC)
      id: gmp-test
      run: |
        C:\Program` Files\Git\bin\bash.exe .github\workflows\scripts\gmp-gcc-aarch64-test.sh

    - name: Extract VCPKG logs
      if: ${{ always() && steps.gmp-test.outcome != 'success' }}
      uses: actions/upload-artifact@v3
      with:
        name: vcpkg-gmp-logs
        retention-days: 3
        path: |
          vcpkg\buildtrees\gmp\*.log
