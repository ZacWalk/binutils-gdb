name: binutils-gdb CI

on:
  push:
    branches: [ "aarch64-pe-dev", "master" ]
  pull_request:
    branches: [ "aarch64-pe-dev" ]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch name'
        required: false
        type: string

jobs:

  # build-all-targets:

  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Install dependencies
  #     run: | 
  #       sudo apt-get update
  #       sudo apt-get -y install libmpfr-dev
        
  #   - uses: actions/checkout@v3
  #     with:
  #       ref: ${{ inputs.branch }}
    
  #   - name: configure
  #     run: ./configure --enable-targets=all
      
  #   - name: build
  #     run: make -j$(nproc)

  test-binutils:

    runs-on: [self-hosted, Windows, ARM64, GCC]

    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ inputs.branch }}

    # - name: Build binutils
    #   id: binutils-build
    #   run: |
    #     C:\Program` Files\Git\bin\bash.exe .github\workflows\scripts\build-binutils.sh

    - name: Configure OpenBLAS
      id: openblas-configure
      if: ${{ always() && steps.binutils-build.outcome == 'success' }}
      shell: cmd
      run: |
        git clone --depth 1 https://github.com/xianyi/OpenBLAS.git openblas
        mkdir openblas\build
        "C:\Program Files (x86)\Git\bin\bash.exe" -c "sed -i '143,145d' ./openblas/common_arm64.h"
        cd openblas/build
        set PATH=%PATH%;C:\Program Files\Microsoft Visual Studio\2022\Preview\VC\Tools\Llvm\ARM64\bin 
        cmake ..  -G Ninja -DCMAKE_C_COMPILER=clang -DBUILD_WITHOUT_LAPACK=1 -DNOFORTRAN=1 -DDYNAMIC_ARCH=0 -DTARGET=ARMV8 -DARCH=arm64 -DBINARY=64 -DUSE_OPENMP=0 -DCMAKE_SYSTEM_PROCESSOR=ARM64 -DCMAKE_CROSSCOMPILING=0 -DCMAKE_SYSTEM_NAME=Windows

    # - name: Build and test OpenBLAS
    #   if: ${{ always() && steps.openblas-configure.outcome == 'success' }}
    #   run: |
    #     C:\Program` Files\Git\bin\bash.exe .github\workflows\scripts\openblas-test.sh

    # - name: Minimal console app testing
    #   if: ${{ always() && steps.binutils-build.outcome == 'success' }}
    #   run: |
    #     C:\Program` Files\Git\bin\bash.exe .github\workflows\scripts\min-con-app-test.sh 
    
    # - name: Testing GMP(GCC)
    #   id: gmp-test
    #   if: ${{ always() && steps.binutils-build.outcome == 'success' }}
    #   run: |
    #     C:\Program` Files\Git\bin\bash.exe .github\workflows\scripts\gmp-gcc-aarch64-test.sh

    # - name: Extract VCPKG logs
    #   if: ${{ always() && steps.gmp-test.outcome != 'success' }}
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: vcpkg-gmp-logs
    #     retention-days: 3
    #     path: |
    #       vcpkg\buildtrees\gmp\*.log
